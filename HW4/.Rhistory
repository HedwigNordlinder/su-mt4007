ten_year_data$growth_vector <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
ten_year_data$growth_vector[i] <- ten_year_data[i,3] / starting_value
}
View(ten_year_data)
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth_vector <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
ten_year_data$growth_vector[i] <- max(ten_year_data[i,3] / starting_value,1)
}
View(ten_year_data)
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth_vector <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
ten_year_data$growth_vector[i] <- max(ten_year_data[i,3] / starting_value,1)
}
pivoted_ten_year_data <- ten_year_data %>% select(year, name, growth_vector) %>% mutate(value = growth_vector) %>% select(!growth_vector) %>% pivot_wider(id_cols = year)
View(pivoted_ten_year_data)
ten_year_data
library(tidyverse)
library(ggplot2)
population_data <- read.csv("pop_data.csv") %>% select(!X)
phone_data <- read.csv("cell_phone_data_cleaned.csv") %>% select(!X)
library(tidyverse)
library(ggplot2)
population_data <- read.csv("pop_data.csv") %>% select(!X)
phone_data <- read.csv("cell_phone_data_cleaned.csv") %>% select(!X)
pivoted_population_data <- population_data %>% pivot_longer(!iso.3) %>% mutate(population = value) %>% select(!value)
pivoted_phone_data <- phone_data %>% pivot_longer(!iso.3) %>% mutate(cell_phones = value) %>% select(!value)
naming_data <- read.csv("country_data.csv") %>% select(name, alpha.3) %>% mutate(iso.3 = alpha.3) %>% select(!alpha.3)
merged_data <- merge(pivoted_population_data, pivoted_phone_data) %>% mutate(phones_per_capita = cell_phones / population)
named_merged_data <- inner_join(naming_data, merged_data, by = "iso.3") %>% mutate(year = name.y, name = name.x, value = phones_per_capita) %>% select(name, year, phones_per_capita, value) %>% replace(is.na(.), -1) %>% mutate(year = as.numeric(gsub("[^0-9.-]","",year))) %>% select(name, year, value)
pivoted_merged_data <- named_merged_data %>% pivot_wider(id_cols = year)
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth_vector <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
ten_year_data$growth_vector[i] <- max(ten_year_data[i,3] / starting_value,1)
}
ggplot()
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
ten_year_data$growth[i] <- max(ten_year_data[i,3] / starting_value,1)
}
ggplot(ten_year_data, aes(x = year, y = growth, color = name)) + geom_line()
ggplot(ten_year_data, aes(x = year, y = growth, color = name)) + geom_line()
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
ten_year_data$growth[i] <- max(ten_year_data[i,3] / starting_value,1)
}
ggplot(ten_year_data, aes(x = year, y = growth, color = name)) + geom_line(show.legend = false)
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
ten_year_data$growth[i] <- max(ten_year_data[i,3] / starting_value,1)
}
ggplot(ten_year_data, aes(x = year, y = growth, color = name)) + geom_line(show.legend = FALSE)
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
growth <- ten_year_data[i,3] / starting_value
ten_year_data$growth[i] <- growth
if(growth < 0) {
ten_year_data$growth[i] <- ten_year_data$growth[i-1]
}
}
ggplot(ten_year_data, aes(x = year, y = growth, color = name)) + geom_line(show.legend = FALSE)
which.max(ten_year_data$growth)
ten_year_data[1451,]
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
growth <- ten_year_data[i,3] / starting_value
ten_year_data$growth[i] <- growth
if(growth < 0) {
ten_year_data$growth[i] <- ten_year_data$growth[i-1]
}
}
ggplot(ten_year_data, aes(x = year, y = growth, color = name)) + geom_line(show.legend = FALSE) + scale_color_manual()
ten_year_data <- named_merged_data[named_merged_data$year >= 2009,]
ten_year_data$growth <- rep(0, nrow(ten_year_data))
for(i in 1:nrow(ten_year_data)) {
name <- ten_year_data[i,1]
starting_value <- ten_year_data[ten_year_data$name == name,3][1]
growth <- ten_year_data[i,3] / starting_value
ten_year_data$growth[i] <- growth
if(growth < 0) {
ten_year_data$growth[i] <- ten_year_data$growth[i-1]
}
}
ggplot(ten_year_data, aes(x = year, y = growth, color = name)) + geom_line(show.legend = FALSE)
growth_2019 <- ten_year_data[ten_year_data$year == 2019,]
fast_growers <- ten_year_data[order(-growth_2019$growth),]
growth_2019 <- ten_year_data[ten_year_data$year == 2019,]
fast_growers <- unique(ten_year_data[order(-growth_2019$growth),]$name)
fast_growers
growth_2019 <- ten_year_data[ten_year_data$year == 2019,]
fast_growers <- ten_year_data[order(-growth_2019$growth),]
fast_growers
growth_2019 <- ten_year_data[ten_year_data$year == 2019,]
fast_growers <- growth_2019[order(-growth_2019$growth),]
fast_growers
growth_2019 <- ten_year_data[ten_year_data$year == 2019,]
fast_growers <- growth_2019[order(-growth_2019$growth),1:10]
growth_2019 <- ten_year_data[ten_year_data$year == 2019,]
fast_growers <- growth_2019[order(-growth_2019$growth)[1:10],]
fast_growers
growth_2019 <- ten_year_data[ten_year_data$year == 2019,]
fast_growers <- growth_2019[order(-growth_2019$growth)[1:10],]$name
fast_grower_data <- ten_year_data[ten_year_data$name %in% fast_growers,]
ggplot(fast_grower_data, aes(x = year, y = growth, color = name)) + geom_line()
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
dbListTables(db)
dbReadTable(db, "user_actions")
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbSendQuery(db, "SELECT username FROM user_actions WHERE action=signup")
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbSendQuery(db, "SELECT username FROM user_actions WHERE action = signup")
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbSendQuery(db, "SELECT username FROM user_actions WHERE action = 'signup'")
signed_up_users
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbFetch(dbSendQuery(db, "SELECT username FROM user_actions WHERE action = 'signup'"))
signed_up_users
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbFetch(dbSendQuery(db, "SELECT username FROM user_actions WHERE action = 'signup'"))
signed_up_users
actions_by_user <- dbFetch(dbSendQuery(db, "SELECT username, COUNT(*) as action_count, FROM user_actions GROUP BY username"))
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbFetch(dbSendQuery(db, "SELECT username FROM user_actions WHERE action = 'signup'"))
signed_up_users
dbDisconnect(db)
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbFetch(dbSendQuery(db, "SELECT username FROM user_actions WHERE action = 'signup'"))
signed_up_users
dbDisconnect(db)
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbFetch(dbSendQuery(db, "SELECT username FROM user_actions WHERE action = 'signup'"))
signed_up_users
dbDisconnect(db)
actions_by_user <- dbFetch(dbSendQuery(db, "SELECT username, COUNT(*) as action_count, FROM user_actions GROUP BY username"))
actions_by_user <- dbFetch(dbSendQuery(db, "SELECT username, COUNT(*) as action_count, FROM user_actions GROUP BY username"))
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
actions_by_user <- dbFetch(dbSendQuery(db, "SELECT username, COUNT(*) as action_count, FROM user_actions GROUP BY username"))
dbFetch(dbSendQuery(db, "SELECT username, COUNT(*) as action_count, FROM user_actions GROUP BY username"))
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
actions_by_user_query <- dbSendQuery(db, "SELECT username, COUNT(*) as action_count, FROM user_actions GROUP BY username")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
actions_by_user_query <- dbSendQuery(db, "SELECT username, COUNT(*) as action_count FROM user_actions GROUP BY username")
actions_by_user <- dbFetch(actions_by_user_query)
actions_by_user
dbFetch(dbSendQuery(db, "SELECT * FROM user_actions"))
dbFetch(dbSendQuery(db, "SELECT CONVERT(timestamp, GETDATE()) FROM user_actions"))
dbFetch(dbSendQuery(db, "SELECT CONVERT(timestamp, GETDATE FROM user_actions"))
dbFetch(dbSendQuery(db, "SELECT CONVERT(timestamp, GETDATE) FROM user_actions"))
dbFetch(dbSendQuery(db, "SELECT CONVERT(timestamp, GETDATE()) FROM user_actions"))
dbFetch(dbSendQuery(db, "SELECT strftime('%d-%m-%Y', timestamp) as date FROM user_actions"))
same_day_query <- dbSendQuery(db, "SELECT username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY action, date")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date WHERE action = 'login' AND action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT COUNT(*) as action_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE signup_count > 0 AND login_count > 0")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE signup_count >= 0 AND login_count >= 0")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE signup_count>=0 AND login_count>=0")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE signup_count >= 0 AND login_count >= 0")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE (signup_count >= 0) AND (login_count >= 0)")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE (signup_count >= 0) AND (login_count >= 0)")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE (signup_count >= 0) AND (login_count >= 0)")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE (signup_count >= 0) AND (login_count >= 0)")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE (signup_count >= 0) AND (login_count >= 0)")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE ((signup_count >= 0) AND (login_count >= 0))")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE signup_count >= 0")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action WHERE action = 'login'")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action")
same_day_results <- dbFetch(same_day_query)
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions GROUP BY date, action HAVING (signup_count >= 0) AND (login_count >= 0)")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, userid FROM user_actions GROUP BY date, action HAVING (signup_count >= 0) AND (login_count >= 0)")
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, user_id FROM user_actions GROUP BY date, action HAVING (signup_count >= 0) AND (login_count >= 0)")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, user_id FROM user_actions GROUP BY date, action HAVING (signup_count > 0) AND (login_count > 0)")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT user_id, username FROM (SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, user_id FROM user_actions GROUP BY date, action HAVING (signup_count > 0) AND (login_count > 0))")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT UNIQUE user_id, username FROM (SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, user_id FROM user_actions GROUP BY date, action HAVING (signup_count > 0) AND (login_count > 0))")
same_day_query <- dbSendQuery(db, "SELECT user_id, username FROM (SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, user_id FROM user_actions GROUP BY date, action HAVING (signup_count > 0) AND (login_count > 0))")
same_day_results <- dbFetch(same_day_query)
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT user_id, username FROM (SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, user_id FROM user_actions GROUP BY date, action HAVING (signup_count > 0) AND (login_count > 0))")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT user_id, username FROM (SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, user_id FROM user_actions GROUP BY date HAVING (signup_count > 0) AND (login_count > 0))")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT COUNT(action = 'signup') as signup_count, COUNT(action = 'login') as login_count, username, action, strftime('%Y-%m-%d', timestamp) AS date, user_id FROM user_actions GROUP BY date HAVING (signup_count > 0) AND (login_count > 0)")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbFetch(dbSendQuery(db, "SELECT * FROM user_actions WHERE action = 'signup' AND user_id = 27"))
dbFetch(dbSendQuery(db, "SELECT * FROM user_actions WHERE action = 'signup' AND user_id = 23"))
same_day_query <- dbSendQuery(db, "SELECT strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE ")
same_day_query <- dbSendQuery(db, "SELECT strftime('%Y-%m-%d', timestamp) as date FROM user_actions")
same_day_results <- dbFetch(same_day_query)
same_day_results
same_day_query <- dbSendQuery(db, "SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_results <- dbFetch(same_day_query)
same_day_results
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
actions_by_user_query <- dbSendQuery(db, "CREATE TABLE signup AS SELECT username, COUNT(*) as action_count FROM user_actions GROUP BY username")
actions_by_user <- dbFetch(actions_by_user_query)
actions_by_user
actions_by_user
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
actions_by_user_query <- dbSendQuery(db, "CREATE TABLE signup AS SELECT username, COUNT(*) as action_count FROM user_actions GROUP BY username")
dbSendQuery(db, "SELECT * FROM signup")
same_day_query <- dbSendQuery(db, "SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_results <- dbFetch(same_day_query)
actions_by_user_query <- dbSendQuery(db, "CREATE TABLE signup AS SELECT username, COUNT(*) as action_count FROM user_actions GROUP BY username")
dbFetch(dbSendQuery(db, "SELECT * FROM signup"))
same_day_query <- dbSendQuery(db, "DROP TABLE signup; CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_results <- dbFetch(same_day_query)
same_day_query <- dbSendQuery(db, "DROP TABLE signup CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "DROP TABLE signup; CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
dbFetch(dbSendQuery(db, "SELECT * FROM signupo"))
dbFetch(dbSendQuery(db, "SELECT * FROM signup"))
dbSendQuery(db, "DROP TABLE signup")
# dbSendQuery(db, "DROP TABLE signup")
same_day_query <- dbSendQuery(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_results <- dbFetch(same_day_query)
dbExecute(db, "DROP TABLE signup")
same_day_query <- dbExecute(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_results <- dbFetch(same_day_query)
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT username, user_id, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions WHERE date IN (SELECT date FROM signup)")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT username, user_id, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions WHERE date IN (SELECT date FROM signup WHERE user_id = user_id)")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbFetch(dbSendQuery(db, "SELECT * FROM signup WHERE username = 'user31'"))
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
actions_by_user_query <- dbSendQuery(db, "SELECT username, COUNT(*) as action_count FROM user_actions GROUP BY username")
actions_by_user <- dbFetch(actions_by_user_query)
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT username, user_id, action, strftime('%Y-%m-%d', timestamp) AS date FROM user_actions WHERE date IN (SELECT date FROM signup WHERE user_id = user_id)")
same_day_results <- dbFetch(same_day_query)
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date")
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT *, strftime('%Y-%m-%d', timestamp) as date from signup s1, user_actions s2 WHERE s1.signup_date = s2.date")
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date; UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, strftime('%Y-%m-%d', timestamp) as signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date")
same_day_results <- dbFetch(same_day_query)
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date; UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions REMOVE COLUMN date")
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date; UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date; UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT * from signup s1, user_actions s2")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT * from signup s1, user_actions s2")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT user_id, username from signup s1, user_actions s2 WHERE s1.signup_date = s2.date AND s2.action = 'login'")
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login'")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT DISTINCT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login'")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT DISTINCT * FROM (SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login')")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT DISTINCT username, user_id FROM (SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login')")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login' GROUP BY user_id")
same_day_results <- dbFetch(same_day_query)
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login'")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT DISTINCT username FROM (SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login')")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT DISTINCT username, user_id FROM (SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login')")
same_day_results <- dbFetch(same_day_query)
same_day_results
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbFetch(dbSendQuery(db, "SELECT username FROM user_actions WHERE action = 'signup'"))
signed_up_users
dbDisconnect(db)
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
actions_by_user_query <- dbSendQuery(db, "SELECT user_id, username, COUNT(*) as action_count FROM user_actions GROUP BY user_id")
actions_by_user <- dbFetch(actions_by_user_query)
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
actions_by_user_query <- dbSendQuery(db, "SELECT user_id, username, COUNT(*) as action_count FROM user_actions GROUP BY user_id")
actions_by_user <- dbFetch(actions_by_user_query)
actions_by_user
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT DISTINCT username, user_id FROM (SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login')")
same_day_results <- dbFetch(same_day_query)
same_day_results
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT DISTINCT username, user_id FROM (SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login')")
same_day_results <- dbFetch(same_day_query)
same_day_results
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbFetch(dbSendQuery(db, "SELECT DISTINCT username FROM user_actions WHERE action = 'signup'"))
signed_up_users
dbDisconnect(db)
library("RSQLite")
db <- dbConnect(drv=RSQLite::SQLite(), dbname="user_actions.db")
signed_up_users <- dbFetch(dbSendQuery(db, "SELECT DISTINCT username FROM user_actions WHERE action = 'signup'"))
signed_up_users
actions_by_user_query <- dbSendQuery(db, "SELECT user_id, username, COUNT(*) as action_count FROM user_actions GROUP BY user_id")
actions_by_user <- dbFetch(actions_by_user_query)
actions_by_user
dbExecute(db, "DROP TABLE signup")
dbExecute(db, "ALTER TABLE user_actions DROP COLUMN date")
dbExecute(db, "ALTER TABLE user_actions ADD COLUMN date")
dbExecute(db, "UPDATE user_actions set date = strftime('%Y-%m-%d', timestamp)")
dbExecute(db, "CREATE TABLE signup AS SELECT username, date AS signup_date FROM user_actions WHERE action = 'signup'")
same_day_query <- dbSendQuery(db, "SELECT DISTINCT username, user_id FROM (SELECT user_id, username FROM (SELECT * from signup s1, user_actions s2 WHERE s1.signup_date = s2.date) WHERE action = 'login')")
same_day_results <- dbFetch(same_day_query)
same_day_results
hashtag_matcher <- "#(.*)%s"
str_extract("I am a #programmer today",hashtag_matcher)
hashtag_matcher <- "#(.*) "
str_extract("I am a #programmer today",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )"
str_extract("I am a #programmer today",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)\""
str_extract("\"I am a #programmer today\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)\""
str_extract("\"I am a #programmer today\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)\""
str_extract("\"I am a #programmer today #jay\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)\""
str_extract("\"Today I am a programmer #programming #tips\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)\""
str_extract("\"Today I am a programmer #programming #tips \"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)\""
str_extract("\"Today I am a programmer #programming #tips \"",hashtag_matcher)[2]
hashtag_matcher <- "#(.*)(?= )|#(.*)\""
str_extract("\"Today I am a programmer #programming #tips \"",hashtag_matcher)[1]
hashtag_matcher <- "#(.*)(?= )|#(.*)\""
str_extract("\"Today I am a programmer #programming #tips\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)(?=\")"
str_extract("\"Today I am a programmer #programming #tips\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)(?=\")"
str_extract("\"Today I am a programmer #programming #tips\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)(?=\")"
str_extract("\"Today I am a programmer #programming #tips\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)(?=\")"
str_extract("\"Today I am a programmer #programming #tips\"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )|#(.*)(?=\")"
str_extract("\"Today I am a programmer #programming #tips \"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )"
str_extract("\"Today I am a programmer #programming #tips \"",hashtag_matcher)
hashtag_matcher <- "#(.*)(?= )"
str_extract("\"Today I am a programmer #programming #tips \"",hashtag_matcher)[2]
hashtag_matcher <- "#(.*)(?= )"
str_extract("\"Today I am a programmer #programming tips \"",hashtag_matcher)
hashtag_matcher <- "#(.*?)(?= )"
str_extract("\"Today I am a programmer #programming tips \"",hashtag_matcher)
hashtag_matcher <- "#(.*?)(?= )"
str_extract("\"Today I am a programmer #programming #tips \"",hashtag_matcher)
hashtag_matcher <- "#(.*?)(?= )"
str_extract("\"Today I am a programmer #programming #tips \"",hashtag_matcher)
hashtag_matcher <- "#(.*?)(?= )"
str_extract_all("\"Today I am a programmer #programming #tips \"",hashtag_matcher)
hashtag_matcher <- "#(.*?)(?= )"
str_extract_all("\"Today I am a programmer #programming #tips \"",hashtag_matcher)[[1]][2]
hashtag_matcher <- "#(.*?)(?= )|#(.*?)(?=\")"
str_extract_all("\"Today I am a programmer #programming #tips\"",hashtag_matcher)
hashtag_matcher <- "#(.*?)(?= )|#(.*?)(?=\")"
python_programming_matcher <- "(#python #programming\"|#programming #python\")"
str_extract_all("\"Today I am a programmer #programming #tips\"",hashtag_matcher)
str_detect(python_programming_matcher, "\"Enjoyed the article. #coding #python\"")
knitr::knit("HW4.Rmd", "HW4.md")
